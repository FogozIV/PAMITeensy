//
// Created by fogoz on 25/04/2025.
//

#ifndef REGISTERCOMMANDS_H
#define REGISTERCOMMANDS_H
#include <complex>

#include "target/AngleTarget.h"
#ifdef TEENSY41
extern "C" {
#include "FlashTxx.h"		// TLC/T3x/T4x/TMM flash primitives
}
#endif

#include "CommandParser.h"
#include "robot/BaseRobot.h"

/**
 * @brief Command registration system
 * 
 * This header provides macros and functions for:
 * - Registering robot commands
 * - AX12 servo control commands
 * - Command parameter validation
 * - Command documentation
 * 
 * The system supports:
 * - Read/write operations
 * - Parameter type checking
 * - Auto-generated documentation
 * - Error handling
 */

/**
 * @brief AX12 control command macro
 * 
 * Generates read/write commands for AX12 servos.
 * 
 * @param address Register address
 * @param size Register size
 * @param name Command name
 * @param writable Whether register is writable
 */
#define AX12_CONTROL(address, size, name, writable) AX12_CONTROL_##writable(address, size, name)

/// Flag indicating flash process status
extern bool flashing_process;
extern bool pause_thread_info;

/**
 * @brief Read-only AX12 control command
 * 
 * Generates a read command for an AX12 register.
 * Format: ax12_read_[name]
 * 
 * @param address Register address
 * @param size Register size
 * @param name Command name
 */
#define AX12_CONTROL_false(address, size, name)\
parser.registerCommand("ax12_read_"#name, "i", [robot](std::vector<CommandParser::Argument> arg, Stream& stream) {\
    auto ax12 = robot->getAX12Handler()->get(arg[0].asInt64()); \
    return String(ax12.read##name()).c_str();\
}, PSTR("Autogenerated ax12 control read command for "#name));

/**
 * @brief Read/write AX12 control command
 * 
 * Generates both read and write commands for an AX12 register.
 * Formats:
 * - ax12_write_[name]
 * - ax12_read_[name]
 * 
 * @param address Register address
 * @param size Register size
 * @param name Command name
 */
#define AX12_CONTROL_true(address, size, name)\
parser.registerCommand("ax12_write_"#name, "ii", [robot](std::vector<CommandParser::Argument> arg, Stream& stream) {\
auto ax12 = robot->getAX12Handler()->get(arg[0].asInt64()); \
return String(ax12.write##name(arg[1].asInt64())).c_str();\
}, PSTR("Autogenerated ax12 control write command for "#name));\
parser.registerCommand("ax12_read_"#name, "i", [robot](std::vector<CommandParser::Argument> arg, Stream& stream) {\
auto ax12 = robot->getAX12Handler()->get(arg[0].asInt64()); \
return String(ax12.read##name()).c_str();\
}, PSTR("Autogenerated ax12 control read command for "#name));

/**
 * @brief Registers all robot commands
 * 
 * This function registers all available commands with the parser:
 * - Motion control commands
 * - AX12 servo commands
 * - System control commands
 * - Configuration commands
 * 
 * @param parser Command parser instance
 * @param robot Robot instance
 */
void registerCommands(CommandParser &parser, std::shared_ptr<BaseRobot> robot);

#endif //REGISTERCOMMANDS_H
