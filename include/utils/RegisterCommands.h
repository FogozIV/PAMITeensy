//
// Created by fogoz on 25/04/2025.
//

#ifndef REGISTERCOMMANDS_H
#define REGISTERCOMMANDS_H
#include "utils/MainHeader.h"
#include <complex>

#include "ramp/CalculatedQuadramp.h"
#include "target/AngleTarget.h"
#include "target/PositionTarget.h"
extern "C" {
#include "FlashTxx.h"		// TLC/T3x/T4x/TMM flash primitives
}
#include <FXUtil.h>

#include "AX12.h"
#include "CommandParser.h"
#include "robot/BaseRobot.h"

#define AX12_CONTROL(address, size, name, writable) AX12_CONTROL_##writable(address, size, name)
extern bool flashing_process;
#define AX12_CONTROL_false(address, size, name)\
parser.registerCommand("ax12_read_"#name, "i", [robot](std::vector<CommandParser::Argument> arg, Stream& stream) {\
    auto ax12 = robot->getAX12Handler()->get(arg[0].asInt64()); \
    return std::to_string(ax12.read##name());\
}, PSTR("Autogenerated ax12 control read command for "#name));

#define AX12_CONTROL_true(address, size, name)\
parser.registerCommand("ax12_write_"#name, "ii", [robot](std::vector<CommandParser::Argument> arg, Stream& stream) {\
auto ax12 = robot->getAX12Handler()->get(arg[0].asInt64()); \
return std::to_string(ax12.write##name(arg[1].asInt64()));\
}, PSTR("Autogenerated ax12 control write command for "#name));\
parser.registerCommand("ax12_read_"#name, "i", [robot](std::vector<CommandParser::Argument> arg, Stream& stream) {\
auto ax12 = robot->getAX12Handler()->get(arg[0].asInt64()); \
return std::to_string(ax12.read##name());\
}, PSTR("Autogenerated ax12 control read command for "#name));

/**
 * this function just register all commands
 * @param parser The parser that needs to be filled
 * @param robot The shared_ptr of the BaseRobot class
 */
void registerCommands(CommandParser &parser, std::shared_ptr<BaseRobot> robot);
#endif //REGISTERCOMMANDS_H
